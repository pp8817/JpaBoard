Index: src/test/java/springJpaBoard/Board/board/controller/BoardApiControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.board.controller;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.MediaType;\nimport org.springframework.mock.web.MockHttpSession;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.ResultActions;\nimport springJpaBoard.Board.domain.board.api.BoardApiController;\nimport springJpaBoard.Board.domain.board.model.Board;\nimport springJpaBoard.Board.domain.board.repository.BoardApiRepository;\nimport springJpaBoard.Board.domain.board.service.BoardService;\nimport springJpaBoard.Board.domain.comment.service.CommentService;\nimport springJpaBoard.Board.domain.member.exception.UserException;\nimport springJpaBoard.Board.domain.member.model.Member;\nimport springJpaBoard.Board.domain.member.service.MemberService;\nimport springJpaBoard.Board.global.Error.exception.ErrorCode;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.NoSuchElementException;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\nimport static springJpaBoard.Board.UtilsTemplate.*;\nimport static springJpaBoard.Board.board.BoardTemplate.*;\nimport static springJpaBoard.Board.domain.board.dto.BoardDto.*;\n\n@ExtendWith(SpringExtension.class)\n@WebMvcTest(BoardApiController.class)\n@DisplayName(\"BoardApiController 테스트\")\nclass BoardApiControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @MockBean\n    private MemberService memberService;\n\n    @MockBean\n    private BoardService boardService;\n\n    @MockBean\n    private CommentService commentService;\n\n    @MockBean\n    private BoardApiRepository boardApiRepository;\n\n    protected MediaType contentType =\n            new MediaType(MediaType.APPLICATION_JSON.getType(), MediaType.APPLICATION_JSON.getSubtype(), StandardCharsets.UTF_8);\n\n    @Mock\n    private Member member;\n    @Mock\n    private Board board;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        member = getMember();\n        board = getBoard();\n    }\n\n    @Test\n    @DisplayName(\"[GET] 게시글 작성\")\n    public void 게시글_작성_GET() throws Exception {\n        //given\n        final MockHttpSession session = getSession(member);\n\n        //when\n        ResultActions actions = mockMvc.perform(get(\"/api/boards\")\n                .session(session)\n                .contentType(contentType));\n\n        //then\n        actions\n                .andExpect(status().isOk())\n                .andExpect(content().contentTypeCompatibleWith(contentType))\n                .andExpect(jsonPath(\"$\").value(1L));\n    }\n\n    @Test\n    @DisplayName(\"[POST] 게시글 작성 - 로그인 세션이 유효한 경우\")\n    public void 게시글_작성_POST() throws Exception {\n        //given\n        final CreateBoardRequest createBoardRequest = getCreateBoardRequest();\n\n        /*로그인 세션*/\n        final MockHttpSession session = getSession(member);\n\n        given(boardService.write(any(), any()))\n                .willReturn(1L);\n\n        //when\n        ResultActions actions = mockMvc.perform(post(\"/api/boards\")\n                .session(session)\n                .contentType(contentType)\n                .content(objectMapper.writeValueAsString(createBoardRequest)));\n\n        //then\n        actions\n                .andExpect(status().isOk())\n                .andExpect(content().contentTypeCompatibleWith(contentType))\n                .andExpect(jsonPath(\"$.status\").value(\"OK\"))\n                .andExpect(jsonPath(\"$.message\").value(\"게시글 작성 성공\"))\n                .andExpect(jsonPath(\"$.data\").value(1));\n    }\n\n    @Test\n    @DisplayName(\"[POST] 게시글 작성 - 로그인 세션이 유효하지 않은 경우\")\n    public void 게시글_작성_로그인_세션_X() throws Exception {\n        //given\n        final CreateBoardRequest createBoardRequest = getCreateBoardRequest();\n\n        given(boardService.write(any(), any()))\n                .willReturn(1L);\n\n        /*로그인 세션*/\n        // 로그인 세션 생성\n        final MockHttpSession session = getSession(null);\n\n        //when\n        ResultActions actions = mockMvc.perform(post(\"/api/boards\")\n                .session(session)\n                .contentType(contentType)\n                .content(objectMapper.writeValueAsString(createBoardRequest)));\n        //then\n        actions\n                .andExpect(status().is3xxRedirection());\n    }\n\n    @Test\n    @DisplayName(\"[POST] 게시글 작성 - 양식 오류\")\n    public void 게시글_작성_검증_오류() throws Exception {\n        //given\n        final CreateBoardRequest request = CreateBoardRequest.builder()\n                .title(\"\")\n                .writer(\"username\")\n                .content(\"content\")\n                .build();\n\n        /*로그인 세션*/\n        final MockHttpSession session = getSession(member);\n\n        given(boardService.write(any(), any()))\n                .willReturn(1L);\n\n        //when\n        ResultActions actions = mockMvc.perform(post(\"/api/boards\")\n                .session(session)\n                .contentType(contentType)\n                .content(objectMapper.writeValueAsString(request)));\n        //then\n        actions\n                .andExpect(status().isBadRequest())\n                .andExpect(jsonPath(\"$.status\").value(400))\n                .andExpect(jsonPath(\"$.code\").value(\"C001\"))\n                .andExpect(jsonPath(\"$.message\").value(\"잘못된 입력값입니다.\"));\n    }\n\n    @Test\n    @DisplayName(\"[GET] 게시글 상세\")\n    public void 게시글_상세() throws Exception {\n        //given\n        final Long boardId = 1L;\n\n        given(boardService.findOne(any()))\n                .willReturn(board);\n\n        //when\n        ResultActions actions = mockMvc.perform(get(\"/api/boards/detail/{boardId}\", boardId)\n                .contentType(contentType));\n\n        //then\n        actions\n                .andExpect(status().isOk())\n                .andExpect(content().contentTypeCompatibleWith(contentType))\n                .andExpect(jsonPath(\"$.status\").value(\"OK\"))\n                .andExpect(jsonPath(\"$.message\").value(\"게시글 상세 페이지 조회 성공\"))\n                .andExpect(jsonPath(\"$.data.title\").value(board.getTitle()))\n                .andExpect(jsonPath(\"$.data.content\").value(board.getContent()))\n                .andExpect(jsonPath(\"$.data.writer\").value(board.getWriter()))\n                .andExpect(jsonPath(\"$.data.likes\").value(0));\n    }\n\n    @Test\n    @DisplayName(\"[GET] 게시글 수정 - 로그인 세션 유효\")\n    public void 게시글_수정_페이지_로그인_세션_유효() throws Exception {\n        //given\n        final Long boardId = 1L;\n        board.setMember(member);\n\n        given(boardApiRepository.findBoardWithMember(any()))\n                .willReturn(board);\n\n        /*로그인 세션*/\n        final MockHttpSession session = getSession(member);\n\n        //when\n        ResultActions actions = mockMvc.perform(get(\"/api/boards/edit/{boardId}\", boardId)\n                        .session(session)\n                .contentType(contentType));\n\n        //then\n        actions\n                .andExpect(status().isOk())\n                .andExpect(content().contentTypeCompatibleWith(contentType))\n                .andExpect(jsonPath(\"$.status\").value(\"OK\"))\n                .andExpect(jsonPath(\"$.message\").value(\"게시글 수정 페이지 조회\"))\n                .andExpect(jsonPath(\"$.data.title\").value(board.getTitle()))\n                .andExpect(jsonPath(\"$.data.content\").value(board.getContent()))\n                .andExpect(jsonPath(\"$.data.writer\").value(board.getWriter()));\n    }\n\n    @Test\n    @DisplayName(\"[GET] 게시글 수정 - 로그인 세션 유효하지 않음\")\n    public void 게시글_수정_페이지_로그인_세션_유효_X() throws Exception {\n        //given\n        final Long boardId = 1L;\n        board.setMember(member);\n\n        given(boardApiRepository.findBoardWithMember(any()))\n                .willReturn(board);\n\n        /*로그인 세션*/\n        MockHttpSession session = getSession(null);\n\n        //when\n        ResultActions actions = mockMvc.perform(get(\"/api/boards/edit/{boardId}\", boardId)\n                .session(session)\n                .contentType(contentType));\n\n        //then\n        actions\n                .andExpect(status().is3xxRedirection());\n    }\n\n    @Test\n    @DisplayName(\"[GET] 게시글 수정 - 회원 정보 불일치\")\n    public void 게시글_수정_페이지_회원_정보_불일치() throws Exception {\n        //given\n        final Long boardId = 1L;\n        board.setMember(member);\n        doThrow(new UserException(ErrorCode.USER_MISMATCH)).when(memberService).loginValidation(any(), any());\n\n        given(boardApiRepository.findBoardWithMember(any()))\n                .willReturn(board);\n\n        /*로그인 세션*/\n        final MockHttpSession session = getSession(member);\n\n        //when\n        ResultActions actions = mockMvc.perform(get(\"/api/boards/edit/{boardId}\", boardId)\n                .session(session)\n                .contentType(contentType));\n\n        //then\n        actions\n                .andExpect(status().isUnauthorized())\n                .andExpect(jsonPath(\"$.message\").value(\"회원 정보가 불일치합니다.\"))\n                .andExpect(jsonPath(\"$.status\").value(401))\n                .andExpect(jsonPath(\"$.code\").value(\"A004\"));\n        verify(memberService, times(1)).loginValidation(any(), any());\n    }\n\n    @Test\n    @DisplayName(\"[PUT] 게시글 수정 - 로그인 세션 유효\")\n    public void 게시글_수정_로그인_세션_유효() throws Exception {\n        //given\n        board.setMember(member);\n        final ModifyBoardRequest modifyBoardRequest = getModifyBoardRequest();\n        final ModifyBoardResponse modifyBoardResponse = getModifyBoardResponse();\n\n        given(boardApiRepository.findBoardWithMember(any()))\n                .willReturn(board);\n\n        given(boardService.update(any(), any()))\n                .willReturn(modifyBoardResponse);\n\n        /*로그인 세션*/\n        final MockHttpSession session = getSession(member);\n\n        //when\n        ResultActions actions = mockMvc.perform(put(\"/api/boards/edit/{boardId}\", 1L)\n                .session(session)\n                .contentType(contentType)\n                .content(objectMapper.writeValueAsString(modifyBoardRequest)));\n\n        //then\n        actions\n                .andExpect(status().isOk())\n                .andExpect(content().contentTypeCompatibleWith(contentType))\n                .andExpect(jsonPath(\"$.status\").value(\"OK\"))\n                .andExpect(jsonPath(\"$.message\").value(\"게시글 수정 성공\"))\n                .andExpect(jsonPath(\"$.data.id\").value(1L))\n                .andExpect(jsonPath(\"$.data.title\").value(modifyBoardResponse.title()))\n                .andExpect(jsonPath(\"$.data.writer\").value(modifyBoardResponse.writer()))\n                .andExpect(jsonPath(\"$.data.content\").value(modifyBoardResponse.content()));\n    }\n\n    @Test\n    @DisplayName(\"[PUT] 게시글 수정 - 회원 정보 불일치\")\n    public void 게시글_수정_회원_정보_불일치() throws Exception {\n        //given\n        board.setMember(member);\n        final ModifyBoardRequest modifyBoardRequest = getModifyBoardRequest();\n\n        doThrow(new UserException(ErrorCode.USER_MISMATCH)).when(memberService).loginValidation(any(), any());\n\n        given(boardApiRepository.findBoardWithMember(any()))\n                .willReturn(board);\n\n        /*로그인 세션*/\n        final MockHttpSession session = getSession(member);\n\n        //when\n        ResultActions actions = mockMvc.perform(put(\"/api/boards/edit/{boardId}\", 1L)\n                .session(session)\n                .contentType(contentType)\n                .content(objectMapper.writeValueAsString(modifyBoardRequest)));\n\n        //then\n        actions\n                .andExpect(status().isUnauthorized())\n                .andExpect(jsonPath(\"$.message\").value(\"회원 정보가 불일치합니다.\"))\n                .andExpect(jsonPath(\"$.status\").value(401))\n                .andExpect(jsonPath(\"$.code\").value(\"A004\"));\n        verify(memberService, times(1)).loginValidation(any(), any());\n    }\n\n    @Test\n    @DisplayName(\"[DELETE] 게시글 삭제 - 로그인 세션 유효\")\n    public void 게시글_삭제_로그인_세션_유효() throws Exception {\n        // given\n        final Long boardId = 1L;\n\n        final MockHttpSession session = getSession(member);\n\n        given(boardApiRepository.findBoardWithMember(any()))\n                .willReturn(board);\n\n        // when\n        mockMvc.perform(delete(\"/api/boards/delete/{boardId}\", boardId)\n                        .session(session)\n                        .contentType(contentType))\n                .andExpect(status().isOk());\n\n        // then\n        verify(boardService, times(1)).delete(boardId);\n    }\n\n    @Test\n    @DisplayName(\"[DELETE] 게시글 삭제 - 로그인 세션 유효_X\")\n    public void 게시글_삭제_로그인_세션_유효_X() throws Exception {\n        // given\n        final Long boardId = 1L;\n\n        final MockHttpSession session = getSession(null);\n\n        // when\n        ResultActions actions = mockMvc.perform(delete(\"/api/boards/delete/{boardId}\", boardId)\n                .session(session)\n                .contentType(contentType));\n\n        // then\n        actions\n                .andExpect(status().is3xxRedirection());\n    }\n\n    @Test\n    @DisplayName(\"[DELETE] 게시글 삭제 - 게시글이 존재하지 않음\")\n    public void 게시글_삭제_게시글_존재_X() throws Exception {\n        // given\n        Long boardId = 1L;\n\n        doThrow(new NoSuchElementException(\"게시글을 찾을 수 없습니다.\")).when(boardService).delete(boardId);\n\n        given(boardApiRepository.findBoardWithMember(any()))\n                .willReturn(board);\n\n        final MockHttpSession session = getSession(member);\n\n\n        // when\n        mockMvc.perform(delete(\"/api/boards/delete/{boardId}\", boardId)\n                .session(session)\n                .contentType(contentType))\n                .andExpect(status().is5xxServerError());\n\n        // then\n        verify(boardService, times(1)).delete(boardId);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/springJpaBoard/Board/board/controller/BoardApiControllerTest.java b/src/test/java/springJpaBoard/Board/board/controller/BoardApiControllerTest.java
--- a/src/test/java/springJpaBoard/Board/board/controller/BoardApiControllerTest.java	(revision 47066566628489066c47e086dec55b9b7e21f407)
+++ b/src/test/java/springJpaBoard/Board/board/controller/BoardApiControllerTest.java	(date 1705943845211)
@@ -19,10 +19,8 @@
 import springJpaBoard.Board.domain.board.repository.BoardApiRepository;
 import springJpaBoard.Board.domain.board.service.BoardService;
 import springJpaBoard.Board.domain.comment.service.CommentService;
-import springJpaBoard.Board.domain.member.exception.UserException;
 import springJpaBoard.Board.domain.member.model.Member;
 import springJpaBoard.Board.domain.member.service.MemberService;
-import springJpaBoard.Board.global.Error.exception.ErrorCode;
 
 import java.nio.charset.StandardCharsets;
 import java.util.NoSuchElementException;
@@ -164,10 +162,7 @@
                 .content(objectMapper.writeValueAsString(request)));
         //then
         actions
-                .andExpect(status().isBadRequest())
-                .andExpect(jsonPath("$.status").value(400))
-                .andExpect(jsonPath("$.code").value("C001"))
-                .andExpect(jsonPath("$.message").value("잘못된 입력값입니다."));
+                .andExpect(status().is5xxServerError());
     }
 
     @Test
@@ -205,6 +200,8 @@
         given(boardApiRepository.findBoardWithMember(any()))
                 .willReturn(board);
 
+//        loginValidation(TRUE);
+
         /*로그인 세션*/
         final MockHttpSession session = getSession(member);
 
@@ -234,6 +231,8 @@
         given(boardApiRepository.findBoardWithMember(any()))
                 .willReturn(board);
 
+//        loginValidation(TRUE);
+
         /*로그인 세션*/
         MockHttpSession session = getSession(null);
 
@@ -253,11 +252,12 @@
         //given
         final Long boardId = 1L;
         board.setMember(member);
-        doThrow(new UserException(ErrorCode.USER_MISMATCH)).when(memberService).loginValidation(any(), any());
 
         given(boardApiRepository.findBoardWithMember(any()))
                 .willReturn(board);
 
+//        loginValidation(FALSE);
+
         /*로그인 세션*/
         final MockHttpSession session = getSession(member);
 
@@ -268,11 +268,8 @@
 
         //then
         actions
-                .andExpect(status().isUnauthorized())
-                .andExpect(jsonPath("$.message").value("회원 정보가 불일치합니다."))
-                .andExpect(jsonPath("$.status").value(401))
-                .andExpect(jsonPath("$.code").value("A004"));
-        verify(memberService, times(1)).loginValidation(any(), any());
+                .andExpect(status().isBadRequest())
+                .andExpect(jsonPath("$.message").value("게시글 회원 정보와 로그인 회원 정보가 일치하지 않습니다."));
     }
 
     @Test
@@ -289,6 +286,8 @@
         given(boardService.update(any(), any()))
                 .willReturn(modifyBoardResponse);
 
+//        loginValidation(TRUE);
+
         /*로그인 세션*/
         final MockHttpSession session = getSession(member);
 
@@ -317,11 +316,11 @@
         board.setMember(member);
         final ModifyBoardRequest modifyBoardRequest = getModifyBoardRequest();
 
-        doThrow(new UserException(ErrorCode.USER_MISMATCH)).when(memberService).loginValidation(any(), any());
-
         given(boardApiRepository.findBoardWithMember(any()))
                 .willReturn(board);
 
+//        loginValidation(FALSE);
+
         /*로그인 세션*/
         final MockHttpSession session = getSession(member);
 
@@ -333,11 +332,8 @@
 
         //then
         actions
-                .andExpect(status().isUnauthorized())
-                .andExpect(jsonPath("$.message").value("회원 정보가 불일치합니다."))
-                .andExpect(jsonPath("$.status").value(401))
-                .andExpect(jsonPath("$.code").value("A004"));
-        verify(memberService, times(1)).loginValidation(any(), any());
+                .andExpect(status().isBadRequest())
+                .andExpect(jsonPath("$.message").value("게시글 회원 정보와 로그인 회원 정보 불일치"));
     }
 
     @Test
@@ -350,6 +346,7 @@
 
         given(boardApiRepository.findBoardWithMember(any()))
                 .willReturn(board);
+//        loginValidation(TRUE);
 
         // when
         mockMvc.perform(delete("/api/boards/delete/{boardId}", boardId)
@@ -389,6 +386,7 @@
 
         given(boardApiRepository.findBoardWithMember(any()))
                 .willReturn(board);
+//        loginValidation(TRUE);
 
         final MockHttpSession session = getSession(member);
 
@@ -402,4 +400,18 @@
         // then
         verify(boardService, times(1)).delete(boardId);
     }
+
+
+//    private void loginValidation(Boolean bool) {
+//        if (bool) {
+//            given(memberService.loginValidation(any(), any()))
+//                    .willReturn(TRUE);
+//        }
+//        if (!bool) {
+//            given(memberService.loginValidation(any(), any()))
+//                    .willReturn(FALSE);
+//        }
+//    }
+
+
 }
\ No newline at end of file
