Index: src/main/java/springJpaBoard/Board/domain/board/controller/BoardController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.domain.board.controller;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport springJpaBoard.Board.api.apirepository.BoardApiRepository;\nimport springJpaBoard.Board.domain.board.model.Board;\nimport springJpaBoard.Board.domain.member.model.Member;\nimport springJpaBoard.Board.domain.argumenresolver.Login;\nimport springJpaBoard.Board.domain.board.model.BoardSearch;\nimport springJpaBoard.Board.domain.board.service.BoardService;\nimport springJpaBoard.Board.domain.comment.service.CommentService;\nimport springJpaBoard.Board.domain.member.service.MemberService;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\nimport static java.util.stream.Collectors.toList;\nimport static springJpaBoard.Board.domain.board.dto.BoardDto.*;\nimport static springJpaBoard.Board.domain.comment.dto.CommentDto.CommentResponse;\nimport static springJpaBoard.Board.domain.comment.dto.CommentDto.CreateCommentRequest;\nimport static springJpaBoard.Board.domain.member.dto.MemberDto.MemberResponse;\n\n@Controller\n@RequiredArgsConstructor\n@RequestMapping(\"/boards\")\npublic class BoardController {\n\n    private final BoardService boardService;\n    private final MemberService memberService;\n    private final CommentService commentService;\n    private final BoardApiRepository boardApiRepository;\n\n    /**\n     * 게시글 작성\n     */\n    @GetMapping(\"/write\")\n    public String write(@Login Member loginMember, Model model, HttpServletRequest request) {\n\n        model.addAttribute(\"member\", MemberResponse.of(loginMember));\n        model.addAttribute(\"boardForm\", CreateBoardRequest.builder().build());\n        return \"boards/writeBoardForm\";\n    }\n\n\n    @PostMapping(\"/write\")\n    public String write(@Validated @ModelAttribute CreateBoardRequest boardRequestDTO, BindingResult result, @RequestParam(\"memberId\") Long memberId) {\n\n        /*\n        오류 발생시(@Valid 에서 발생)\n         */\n        if (result.hasErrors()) {\n            System.out.println(\"result = \" + result.getAllErrors());\n            return \"boards/writeBoardForm\";\n        }\n\n        boardService.write(boardRequestDTO, memberId);\n        return \"redirect:/\";\n    }\n\n    /**\n     * 게시글 목록\n     */\n    @GetMapping\n    public String boardList(@ModelAttribute(\"boardSearch\") BoardSearch boardSearch, Model model, @PageableDefault(page = 0, size=9, sort = \"id\", direction = Sort.Direction.DESC) Pageable pageable) {\n\n        Page<Board> boardList = null;\n\n        if (boardSearch.searchIsEmpty()) {\n            boardList = boardService.boardList(pageable);\n        } else {\n            String boardTitle = boardSearch.getBoardTitle();\n            String memberGender = boardSearch.getMemberGender();\n\n            if (memberGender == \"\") {\n                boardList = boardService.searchTitle(boardTitle, pageable);\n            } else {\n                boardList = boardService.searchAll(boardTitle, memberGender, pageable);\n            }\n        }\n\n        List<BoardDto> boards = boardList.stream()\n                .map(b -> new BoardDto(b))\n                .collect(toList());\n\n        int nowPage = boardList.getPageable().getPageNumber() + 1;\n        int startPage = Math.max(nowPage - 4, 1); //Math.max를 이용해서 start 페이지가 0이하로 되는 것을 방지\n        int endPage = Math.min(nowPage + 5, boardList.getTotalPages()); //endPage가 총 페이지의 개수를 넘지 않도록\n        int totalPages = boardList.getTotalPages();\n\n        model.addAttribute(\"boards\", boards);\n        model.addAttribute(\"nowPage\", nowPage);\n        model.addAttribute(\"startPage\", startPage);\n        model.addAttribute(\"endPage\", endPage);\n        model.addAttribute(\"totalPages\", totalPages);\n\n        return \"boards/boardList\";\n\n    }\n\n    /**\n     * 게시글 상세 페이지\n     */\n    @GetMapping(\"/{boardId}/detail\")\n    public String detail(@PathVariable Long boardId, @PageableDefault(page = 0, size = 10, sort = \"id\",\n            direction = Sort.Direction.DESC) Pageable pageable,Model model) {\n        boardService.updateView(boardId); // views ++\n        Board board = boardService.findOne(boardId); //이때 comments도 담아오게?\n\n        BoardDetailDto boardDto = new BoardDetailDto(board);\n\n        /* 댓글 관련 */\n        if (boardDto.comments != null && !boardDto.comments.isEmpty()) {\n            model.addAttribute(\"comments\", boardDto.comments);\n        }\n\n//        int nowPage = commentList.getPageable().getPageNumber() + 1;\n//        int startPage = Math.max(nowPage - 4, 1); //Math.max를 이용해서 start 페이지가 0이하로 되는 것을 방지\n//        int endPage = Math.min(nowPage + 5, commentList.getTotalPages()); //endPage가 총 페이지의 개수를 넘지 않도록\n//        int totalPages = commentList.getTotalPages();\n//\n//        model.addAttribute(\"nowPage\", nowPage);\n//        model.addAttribute(\"startPage\", startPage);\n//        model.addAttribute(\"endPage\", endPage);\n//        model.addAttribute(\"totalPages\", totalPages);\n\n        model.addAttribute(\"board\", boardDto);\n//        model.addAttribute(\"member\", member);\n        model.addAttribute(\"commentForm\", CreateCommentRequest.builder().build());\n\n        return \"boards/boardDetail\";\n    }\n\n    /**\n     * 게시글 수정\n     */\n    @GetMapping(\"/{boardId}/edit\")\n    public String updateBoardForm(@PathVariable(\"boardId\") Long boardId, Model model,\n                                  @Login Member loginMember) {\n//        Board board = boardService.findOne(boardId);\n        Board board = boardApiRepository.findBoardWithMember(boardId);\n        Member boardMember = board.getMember();\n\n\n        if (memberService.loginValidation(loginMember, boardMember)) {\n\n            ModifyBoardResponse modifyBoardResponse = ModifyBoardResponse.of(board);\n            model.addAttribute(\"boardForm\", modifyBoardResponse);\n\n            return \"/boards/updateBoardForm\";\n        }\n\n        return \"redirect:/boards/\"+boardId+\"/detail\";\n    }\n\n    @PostMapping(\"/{boardId}/edit\")\n    public String updateBoard(@Validated @ModelAttribute ModifyBoardRequest boardRequestDTO,\n                              @PathVariable Long boardId, @Login Member loginMember) {\n\n        Board board = boardApiRepository.findBoardWithMember(boardId);\n        Member boardMember = board.getMember();\n\n        if (memberService.loginValidation(loginMember, boardMember)) {\n            boardService.update(board, boardRequestDTO);\n            return \"redirect:/boards/\" + boardId + \"/detail\"; //게시글 수정 후 게시글 목록으로 이동\n        }\n\n        return \"redirect:/\"; //잘못된 요청인 경우 홈으로\n    }\n\n    /**\n     * 게시글 삭제\n     */\n    @GetMapping(\"/{boardId}/delete\")\n    public String deleteBoard(@PathVariable Long boardId, @Login Member loginMember){\n        //세션에 회원 데이터가 없으면 home\n        Board board = boardService.findOne(boardId);\n        Member boardMember = board.getMember();\n        if (memberService.loginValidation(loginMember, boardMember)) {\n            boardService.delete(boardId);\n            return \"redirect:/boards\";\n        }\n\n        return \"redirect:/boards/\" + boardId + \"/detail\";\n    }\n\n    /**\n     * BoardDto는 Controller에서만 사용하기 때문에 static class로 작성해줬다.\n     */\n    @Data\n    @AllArgsConstructor\n    static class BoardDto {\n        private Long id;\n\n        /*회원 이름은 나중에 회원 이름 변경 기능이 생긴다면 문제가 될 수 있기 때문에 일단 변경 x*/\n        private String name;\n\n        private String title;\n\n        private String writer;\n\n        private int view;\n\n        private LocalDateTime boardDateTime;\n\n        /*댓글을 작성할 때마다 board의 댓글 수를 증가하는 방식으로*/\n        private int commentCount;\n\n        public BoardDto(Board board) {\n            this.id = board.getId();\n            this.name = board.getMember().getName();\n            this.title = board.getTitle();\n            this.writer = board.getWriter();\n            this.view = board.getView();\n            this.boardDateTime = board.getBoardDateTime();\n            this.commentCount = board.getCommentCount();\n        }\n    }\n\n    @Data\n    @AllArgsConstructor\n    static class BoardDetailDto {\n        private Long id;\n\n        private String title;\n\n        private String content;\n\n        private String writer;\n\n        private int likes;\n\n        private LocalDateTime boardDateTime;\n\n        private List<CommentResponse> comments;\n\n        public BoardDetailDto(Board board) {\n            this.id = board.getId();\n            this.title = board.getTitle();\n            this.content = board.getContent();\n            this.writer = board.getWriter();\n            this.boardDateTime = board.getBoardDateTime();\n            this.likes = board.getLikes();\n            this.comments = board.getCommentList().stream()\n                    .map(CommentResponse::of)\n                    .collect(toList());\n        }\n    }\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/domain/board/controller/BoardController.java b/src/main/java/springJpaBoard/Board/domain/board/controller/BoardController.java
--- a/src/main/java/springJpaBoard/Board/domain/board/controller/BoardController.java	
+++ b/src/main/java/springJpaBoard/Board/domain/board/controller/BoardController.java	
@@ -12,10 +12,9 @@
 import org.springframework.validation.BindingResult;
 import org.springframework.validation.annotation.Validated;
 import org.springframework.web.bind.annotation.*;
-import springJpaBoard.Board.api.apirepository.BoardApiRepository;
 import springJpaBoard.Board.domain.board.model.Board;
 import springJpaBoard.Board.domain.member.model.Member;
-import springJpaBoard.Board.domain.argumenresolver.Login;
+import springJpaBoard.Board.global.argumenresolver.Login;
 import springJpaBoard.Board.domain.board.model.BoardSearch;
 import springJpaBoard.Board.domain.board.service.BoardService;
 import springJpaBoard.Board.domain.comment.service.CommentService;
Index: src/main/java/springJpaBoard/Board/global/Error/ErrorResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.global.Error;\n\nimport lombok.AccessLevel;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;\nimport springJpaBoard.Board.global.Error.exception.ErrorCode;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Getter\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\npublic class ErrorResponse {\n\n    private String message;\n    private int status;\n    private List<FieldError> errors;\n    private String code;\n\n    private ErrorResponse(final ErrorCode code, final List<FieldError> errors) {\n        this.message = code.getMessage();\n        this.status = code.getStatus();\n        this.errors = errors;\n        this.code = code.getCode();\n    }\n\n    private ErrorResponse(final ErrorCode code) {\n        this.message = code.getMessage();\n        this.status = code.getStatus();\n        this.code = code.getCode();\n        this.errors = new ArrayList<>(); // null이 아닌 빈 배열을 응답\n    }\n\n    public static ErrorResponse of(final ErrorCode code, final BindingResult bindingResult) {\n        return new ErrorResponse(code, FieldError.of(bindingResult));\n    }\n\n    public static ErrorResponse of(final ErrorCode code) {\n        return new ErrorResponse(code);\n    }\n\n    public static ErrorResponse of(final ErrorCode code, final List<FieldError> errors) {\n        return new ErrorResponse(code, errors);\n    }\n\n    public static ErrorResponse of(MethodArgumentTypeMismatchException e) {\n        final String value = e.getValue() == null ? \"\" : e.getValue().toString();\n        final List<ErrorResponse.FieldError> errors = ErrorResponse.FieldError.of(e.getName(), value, e.getErrorCode());\n        return new ErrorResponse(ErrorCode.INVALID_TYPE_VALUE, errors);\n    }\n\n    @Getter\n    @NoArgsConstructor(access = AccessLevel.PROTECTED)\n    public static class FieldError {\n        private String field;\n        private String value;\n        private String reason;\n\n        private FieldError(final String field, final String value, final String reason) {\n            this.field = field;\n            this.value = value;\n            this.reason = reason;\n        }\n\n        public static List<FieldError> of(final String field, final String value, final String reason) {\n            List<FieldError> fieldErrors = new ArrayList<>();\n            fieldErrors.add(new FieldError(field, value, reason));\n            return fieldErrors;\n        }\n\n        private static List<FieldError> of(final BindingResult bindingResult) {\n            final List<org.springframework.validation.FieldError> fieldErrors = bindingResult.getFieldErrors();\n            return fieldErrors.stream()\n                    .map(error -> new FieldError(\n                            error.getField(),\n                            error.getRejectedValue() == null ? \"\" : error.getRejectedValue().toString(),\n                            error.getDefaultMessage()))\n                    .collect(Collectors.toList());\n        }\n    }\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/global/Error/ErrorResponse.java b/src/main/java/springJpaBoard/Board/global/Error/ErrorResponse.java
--- a/src/main/java/springJpaBoard/Board/global/Error/ErrorResponse.java	
+++ b/src/main/java/springJpaBoard/Board/global/Error/ErrorResponse.java	
@@ -5,7 +5,6 @@
 import lombok.NoArgsConstructor;
 import org.springframework.validation.BindingResult;
 import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
-import springJpaBoard.Board.global.Error.exception.ErrorCode;
 
 import java.util.ArrayList;
 import java.util.List;
Index: src/main/java/springJpaBoard/Board/global/Error/GlobalExceptionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.global.Error;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.BindException;\nimport org.springframework.web.HttpRequestMethodNotSupportedException;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\nimport org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;\nimport springJpaBoard.Board.global.Error.exception.BusinessException;\nimport springJpaBoard.Board.global.Error.exception.ErrorCode;\n\nimport java.nio.file.AccessDeniedException;\n\n@Slf4j\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n    /**\n     *  javax.validation.Valid or @Validated 으로 binding error 발생시 발생한다.\n     *  HttpMessageConverter 에서 등록한 HttpMessageConverter binding 못할경우 발생\n     *  주로 @RequestBody, @RequestPart 어노테이션에서 발생\n     */\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    protected ResponseEntity<ErrorResponse> handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {\n        log.error(\"handleMethodArgumentNotValidException\", e);\n        final ErrorResponse response = ErrorResponse.of(ErrorCode.INVALID_INPUT_VALUE, e.getBindingResult());\n        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);\n    }\n\n    /**\n     * @ModelAttribut 으로 binding error 발생시 BindException 발생한다.\n     * ref https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-method-args\n     */\n    @ExceptionHandler(BindException.class)\n    protected ResponseEntity<ErrorResponse> handleBindException(BindException e) {\n        log.error(\"handleBindException\", e);\n        final ErrorResponse response = ErrorResponse.of(ErrorCode.INVALID_INPUT_VALUE, e.getBindingResult());\n        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);\n    }\n\n    /**\n     * enum type 일치하지 않아 binding 못할 경우 발생\n     * 주로 @RequestParam enum으로 binding 못했을 경우 발생\n     */\n    @ExceptionHandler(MethodArgumentTypeMismatchException.class)\n    protected ResponseEntity<ErrorResponse> handleMethodArgumentTypeMismatchException(MethodArgumentTypeMismatchException e) {\n        log.error(\"handleMethodArgumentTypeMismatchException\", e);\n        final ErrorResponse response = ErrorResponse.of(e);\n        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);\n    }\n\n    /**\n     * 지원하지 않은 HTTP method 호출 할 경우 발생\n     */\n    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)\n    protected ResponseEntity<ErrorResponse> handleHttpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException e) {\n        log.error(\"handleHttpRequestMethodNotSupportedException\", e);\n        final ErrorResponse response = ErrorResponse.of(ErrorCode.METHOD_NOT_ALLOWED);\n        return new ResponseEntity<>(response, HttpStatus.METHOD_NOT_ALLOWED);\n    }\n\n    /**\n     * Authentication 객체가 필요한 권한을 보유하지 않은 경우 발생합니다.\n     */\n    @ExceptionHandler(AccessDeniedException.class)\n    protected ResponseEntity<ErrorResponse> handleAccessDeniedException(AccessDeniedException e) {\n        log.error(\"handleAccessDeniedException\", e);\n        final ErrorResponse response = ErrorResponse.of(ErrorCode.HANDLE_ACCESS_DENIED);\n        return new ResponseEntity<>(response, HttpStatus.valueOf(ErrorCode.HANDLE_ACCESS_DENIED.getStatus()));\n    }\n\n    @ExceptionHandler(BusinessException.class)\n    protected ResponseEntity<ErrorResponse> handleBusinessException(final BusinessException e) {\n        log.error(\"handleEntityNotFoundException\", e);\n        final ErrorCode errorCode = e.getErrorCode();\n        final ErrorResponse response = ErrorResponse.of(errorCode);\n        return new ResponseEntity<>(response, HttpStatus.valueOf(errorCode.getStatus()));\n    }\n\n\n    @ExceptionHandler(Exception.class)\n    protected ResponseEntity<ErrorResponse> handleException(Exception e) {\n        log.error(\"handleEntityNotFoundException\", e);\n        final ErrorResponse response = ErrorResponse.of(ErrorCode.INTERNAL_SERVER_ERROR);\n        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/global/Error/GlobalExceptionHandler.java b/src/main/java/springJpaBoard/Board/global/Error/GlobalExceptionHandler.java
--- a/src/main/java/springJpaBoard/Board/global/Error/GlobalExceptionHandler.java	
+++ b/src/main/java/springJpaBoard/Board/global/Error/GlobalExceptionHandler.java	
@@ -10,7 +10,6 @@
 import org.springframework.web.bind.annotation.RestControllerAdvice;
 import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
 import springJpaBoard.Board.global.Error.exception.BusinessException;
-import springJpaBoard.Board.global.Error.exception.ErrorCode;
 
 import java.nio.file.AccessDeniedException;
 
Index: src/main/java/springJpaBoard/Board/global/Error/exception/ErrorCode.java
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/global/Error/exception/ErrorCode.java b/src/main/java/springJpaBoard/Board/global/Error/ErrorCode.java
rename from src/main/java/springJpaBoard/Board/global/Error/exception/ErrorCode.java
rename to src/main/java/springJpaBoard/Board/global/Error/ErrorCode.java
--- a/src/main/java/springJpaBoard/Board/global/Error/exception/ErrorCode.java	
+++ b/src/main/java/springJpaBoard/Board/global/Error/ErrorCode.java	
@@ -1,4 +1,4 @@
-package springJpaBoard.Board.global.Error.exception;
+package springJpaBoard.Board.global.Error;
 
 import com.fasterxml.jackson.annotation.JsonFormat;
 import lombok.Getter;
Index: src/main/java/springJpaBoard/Board/domain/comment/controller/CommentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.domain.comment.controller;\n\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport springJpaBoard.Board.domain.member.model.Member;\nimport springJpaBoard.Board.domain.argumenresolver.Login;\nimport springJpaBoard.Board.domain.board.service.BoardService;\nimport springJpaBoard.Board.domain.comment.service.CommentService;\nimport springJpaBoard.Board.domain.member.service.MemberService;\n\nimport javax.validation.Valid;\n\nimport static springJpaBoard.Board.domain.comment.dto.CommentDto.CreateCommentRequest;\n\n@Controller\n@RequiredArgsConstructor\npublic class CommentController {\n\n    private final BoardService boardService;\n    private final CommentService commentService;\n    private final MemberService memberService;\n\n\n    /**\n     * 댓글 작성\n     */\n    @PostMapping(\"/comment\")\n    public String saveComment(@Valid @ModelAttribute CreateCommentRequest commentRequestDTO, BindingResult result, @Login Member loginMember) {\n        Long bno = commentRequestDTO.bno();\n\n\n        if (result.hasErrors()) {\n            return \"redirect:/boards/\" + bno + \"/detail\";\n        }\n\n        commentService.save(commentRequestDTO, loginMember.getId());\n\n        return \"redirect:/boards/\" + bno + \"/detail\"; //쿼리 1번, 게시글 상세 페이지를 다시 로딩하면서 board의 정보가 필요\n    }\n\n    @GetMapping(\"/comment/{id}/delete\")\n    public String deleteComment(@PathVariable Long id) {\n        Long bno = commentService.findOne(id).getBno();\n        commentService.delete(id, bno);\n        return \"redirect:/boards/\" + bno + \"/detail\";\n    }\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/domain/comment/controller/CommentController.java b/src/main/java/springJpaBoard/Board/domain/comment/controller/CommentController.java
--- a/src/main/java/springJpaBoard/Board/domain/comment/controller/CommentController.java	
+++ b/src/main/java/springJpaBoard/Board/domain/comment/controller/CommentController.java	
@@ -8,7 +8,7 @@
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.PostMapping;
 import springJpaBoard.Board.domain.member.model.Member;
-import springJpaBoard.Board.domain.argumenresolver.Login;
+import springJpaBoard.Board.global.argumenresolver.Login;
 import springJpaBoard.Board.domain.board.service.BoardService;
 import springJpaBoard.Board.domain.comment.service.CommentService;
 import springJpaBoard.Board.domain.member.service.MemberService;
Index: src/main/java/springJpaBoard/Board/global/Error/exception/EntityNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.global.Error.exception;\n\npublic class EntityNotFoundException extends BusinessException{\n\n    public EntityNotFoundException(String message) {\n        super(message, ErrorCode.ENTITY_NOT_FOUND);\n    }\n\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/global/Error/exception/EntityNotFoundException.java b/src/main/java/springJpaBoard/Board/global/Error/exception/EntityNotFoundException.java
--- a/src/main/java/springJpaBoard/Board/global/Error/exception/EntityNotFoundException.java	
+++ b/src/main/java/springJpaBoard/Board/global/Error/exception/EntityNotFoundException.java	
@@ -1,5 +1,7 @@
 package springJpaBoard.Board.global.Error.exception;
 
+import springJpaBoard.Board.global.Error.ErrorCode;
+
 public class EntityNotFoundException extends BusinessException{
 
     public EntityNotFoundException(String message) {
Index: src/main/java/springJpaBoard/Board/domain/member/controller/MemberController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.domain.member.controller;\n\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport springJpaBoard.Board.global.constans.SessionConst;\nimport springJpaBoard.Board.domain.member.dto.MemberDto;\nimport springJpaBoard.Board.domain.member.model.Member;\nimport springJpaBoard.Board.domain.argumenresolver.Login;\nimport springJpaBoard.Board.domain.member.model.MemberSearch;\nimport springJpaBoard.Board.domain.board.service.BoardService;\nimport springJpaBoard.Board.domain.member.service.MemberService;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport java.util.List;\n\nimport static java.util.stream.Collectors.toList;\nimport static springJpaBoard.Board.domain.board.dto.BoardDto.BoardDetailResponse;\nimport static springJpaBoard.Board.domain.member.dto.MemberDto.CreateMemberRequest;\nimport static springJpaBoard.Board.domain.member.dto.MemberDto.ModifyMemberRequest;\n\n@Controller\n@RequiredArgsConstructor\n@RequestMapping(\"/members\")\npublic class MemberController {\n\n    private final MemberService memberService;\n    private final BoardService boardService;\n\n    /**\n     * 회원 가입\n     */\n    @GetMapping(\"/new\")\n    public String createForm(Model model) {\n        /**\n         * 빈 껍데기인 MemberFrom 객체를 model에 담아서 가져가는 이유는 Validation의 기능을 사용하기 위해서이다.\n         */\n        model.addAttribute(\"memberForm\", CreateMemberRequest.builder().build());\n        return \"members/createMemberForm\";\n    }\n\n\n    @PostMapping(\"/new\")\n    public String create(@Validated @ModelAttribute(\"memberForm\") CreateMemberRequest memberForm, BindingResult result) {\n\n        /*\n        오류 발생시(@Valid 에서 발생)\n         */\n        if (result.hasErrors()) {\n            return \"members/createMemberForm\";\n        }\n\n        memberService.join(memberForm); //PK 생성\n\n        return \"redirect:/\";\n    }\n\n    /**\n     * 회원 로그인, 로그아웃\n     */\n    @GetMapping(\"/login\")\n    public String loginForm(Model model) {\n        model.addAttribute(\"loginForm\", CreateMemberRequest.builder().build());\n        return \"members/loginMemberForm\";\n    }\n\n    @PostMapping(\"/login\")\n    public String loginV4(@Validated\n                        @ModelAttribute(\"loginForm\") CreateMemberRequest form, BindingResult result, @RequestParam(defaultValue = \"/\") String redirectURL, HttpServletRequest request) {\n\n        if (result.hasErrors()) {\n            return \"members/loginMemberForm\";\n        }\n\n        Member loginMember = memberService.login(form.loginId(), form.password());\n\n        if (loginMember == null) {\n            result.reject(\"loginFail\", \"아이디 또는 비밀번호가 맞지 않습니다.\");\n            return \"members/loginMemberForm\";\n        }\n\n        //로그인 성공 처리\n\n        /*세션이 있으면 있는 세션 반환, 없으면 신규 세션 생성*/\n        HttpSession session = request.getSession();\n        /*세션에 로그인 회원 정보 보관*/\n        session.setAttribute(SessionConst.LOGIN_MEMBER, loginMember);\n\n        return \"redirect:\" + redirectURL;\n    }\n\n    @PostMapping(\"/logout\")\n    public String logout(HttpServletRequest request) {\n        /*세션 삭제*/\n        HttpSession session = request.getSession(false);\n        if (session != null) {\n            session.invalidate(); //세션과 그 안의 데이터가 날아감\n        }\n        return \"redirect:/\";\n    }\n\n\n    /**\n     * 회원 목록\n     */\n    @GetMapping\n    public String memberList(@ModelAttribute(\"memberSearch\") MemberSearch memberSearch, Model model, @PageableDefault(page = 0, size=9, sort = \"id\", direction = Sort.Direction.DESC) Pageable pageable) {\n        Page<Member> memberList = null;\n\n        if (memberSearch.searchIsEmpty()) {\n            memberList = memberService.memberList(pageable);\n        } else {\n            String memberName = memberSearch.getMemberName();\n            String memberGender = memberSearch.getMemberGender();\n\n            if (memberGender == \"\") {\n                memberList = memberService.searchName(memberName, pageable);\n            } else {\n                memberList = memberService.searchAll(memberName, memberGender, pageable);\n            }\n        }\n\n        List<MemberDto.MemberResponse> members = memberList.stream()\n                .map(MemberDto.MemberResponse::of)\n                .collect(toList());\n\n        int nowPage = memberList.getPageable().getPageNumber() + 1;\n        int startPage = Math.max(nowPage - 4, 1); //Math.max를 이용해서 start 페이지가 0이하로 되는 것을 방지\n        int endPage = Math.min(nowPage + 5, memberList.getTotalPages()); //endPage가 총 페이지의 개수를 넘지 않도록\n        int totalPages = memberList.getTotalPages();\n\n        model.addAttribute(\"members\", members);\n        model.addAttribute(\"nowPage\", nowPage);\n        model.addAttribute(\"startPage\", startPage);\n        model.addAttribute(\"endPage\", endPage);\n        model.addAttribute(\"totalPages\", totalPages);\n\n        return \"members/memberList\";\n    }\n\n    /**\n     * 회원 수정\n     */\n    @GetMapping(\"{memberId}/edit\")\n    public String updateMemberForm(@PathVariable(\"memberId\") Long memberId, Model model) {\n        Member member = memberService.findOne(memberId);\n\n        ModifyMemberRequest form = ModifyMemberRequest.of(member);\n\n        model.addAttribute(\"form\", form);\n        return \"members/updateMemberForm\";\n    }\n\n    @PostMapping(\"{memberId}/edit\")\n    public String updateMember(@Validated @ModelAttribute(\"form\") ModifyMemberRequest form,\n                               BindingResult result) {\n        if (result.hasErrors()) {\n            return \"redirect:/\";\n        }\n\n        memberService.update(form.id(), form);//주석 추가\n\n        return \"redirect:/members\"; //회원 수정 후 회원 목록으로 이동\n    }\n\n    /**\n     * 회원 삭제\n     */\n    @GetMapping(\"{memberId}/delete\")\n    public String deleteMember(@PathVariable Long memberId) {\n        memberService.delete(memberId);\n\n        return \"redirect:/\";\n    }\n\n    /**\n     * 회원이 작성한 게시글 리스트\n     */\n    @GetMapping(\"/myPosts\")\n    public String boardList(Model model, @Login Member loginMember) {\n        Long id = loginMember.getId();\n        Member member = memberService.findOne(id);\n\n        List<BoardDetailResponse> boards = member.getBoardList().stream()\n                .map(BoardDetailResponse::of)\n                .collect(toList());\n\n        model.addAttribute(\"name\", member.getName());\n        model.addAttribute(\"boards\", boards);\n        return \"members/myPosts\";\n    }\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/domain/member/controller/MemberController.java b/src/main/java/springJpaBoard/Board/domain/member/controller/MemberController.java
--- a/src/main/java/springJpaBoard/Board/domain/member/controller/MemberController.java	
+++ b/src/main/java/springJpaBoard/Board/domain/member/controller/MemberController.java	
@@ -13,7 +13,7 @@
 import springJpaBoard.Board.global.constans.SessionConst;
 import springJpaBoard.Board.domain.member.dto.MemberDto;
 import springJpaBoard.Board.domain.member.model.Member;
-import springJpaBoard.Board.domain.argumenresolver.Login;
+import springJpaBoard.Board.global.argumenresolver.Login;
 import springJpaBoard.Board.domain.member.model.MemberSearch;
 import springJpaBoard.Board.domain.board.service.BoardService;
 import springJpaBoard.Board.domain.member.service.MemberService;
Index: src/main/java/springJpaBoard/Board/domain/member/api/MemberApiController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.domain.member.api;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport springJpaBoard.Board.global.Error.Message;\nimport springJpaBoard.Board.global.Error.StatusEnum;\nimport springJpaBoard.Board.global.Error.exception.UserException;\nimport springJpaBoard.Board.domain.member.model.Member;\nimport springJpaBoard.Board.domain.argumenresolver.Login;\nimport springJpaBoard.Board.domain.member.model.MemberSearch;\nimport springJpaBoard.Board.domain.board.service.BoardService;\nimport springJpaBoard.Board.domain.member.service.MemberService;\n\nimport java.nio.charset.Charset;\nimport java.util.List;\n\nimport static java.util.stream.Collectors.toList;\nimport static springJpaBoard.Board.domain.board.dto.BoardDto.MyPostsResponse;\nimport static springJpaBoard.Board.domain.member.dto.MemberDto.MemberResponse;\nimport static springJpaBoard.Board.domain.member.dto.MemberDto.ModifyMemberRequest;\n\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/api/members\")\n@Slf4j\npublic class MemberApiController {\n\n    private final MemberService memberService;\n    private final BoardService boardService;\n\n    /* 회원 목록 */\n    @GetMapping\n    public ResponseEntity<Message> members(@RequestBody final MemberSearch memberSearch, @PageableDefault(page = 0, size=9, sort = \"id\", direction = Sort.Direction.DESC) Pageable pageable) {\n\n        final Page<Member> memberList = memberListSearch(memberSearch, pageable);\n\n        final List<MemberResponse> members = memberList.stream().\n                map(MemberResponse::of).\n                collect(toList());\n\n        final Message message = new Message(StatusEnum.OK, \"회원 목록 조회 성공\", members);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(new MediaType(\"application\", \"json\", Charset.forName(\"UTF-8\")));\n\n        return new ResponseEntity<>(message, headers, HttpStatus.OK);\n    }\n\n\n    /* 회원 수정 */@GetMapping(\"/edit/{memberId}\")\n    public ResponseEntity updateForm(@PathVariable final Long memberId, @Login final Member loginMember) {\n\n        final Member member = memberService.findOne(memberId);\n\n        if (memberService.loginValidation(loginMember, member)) {\n\n            final Message message = new Message(StatusEnum.OK, \"회원 데이터 조회 성공\", ModifyMemberRequest.of(member));\n            HttpHeaders headers = new HttpHeaders();\n            headers.setContentType(new MediaType(\"application\", \"json\", Charset.forName(\"UTF-8\")));\n\n            return new ResponseEntity<>(message, headers, HttpStatus.OK);\n        }\n\n        throw new UserException(\"회원 정보가 일치하지 않습니다.\");\n    }\n\n    @PutMapping(\"/edit/{memberId}\")\n    public ResponseEntity updateMember(@RequestBody @Validated final ModifyMemberRequest modifyMemberRequest, @Login final Member loginMember,\n                                       @PathVariable final Long memberId, BindingResult result) {\n\n        if (result.hasErrors()) {\n            throw new UserException(\"회원 수정 오류\");\n        }\n\n        final Member member = memberService.findOne(memberId);\n\n        if (memberService.loginValidation(loginMember, member)) {\n            final MemberResponse memberResponse = memberService.update(memberId, modifyMemberRequest);\n\n            final Message message = new Message(StatusEnum.OK, \"회원 정보 수정 성공\", memberResponse);\n            HttpHeaders headers = new HttpHeaders();\n            headers.setContentType(new MediaType(\"application\", \"json\", Charset.forName(\"UTF-8\")));\n\n            return new ResponseEntity<>(message, headers, HttpStatus.OK);\n        }\n\n        throw new UserException(\"회원 정보가 일치하지 않습니다.\");\n    }\n\n    /* 회원 삭제 */\n    @DeleteMapping(\"/delete/{memberId}\")\n    public ResponseEntity deleteMember(@PathVariable final Long memberId, @Login final Member loginMember) {\n        final Member member = memberService.findOne(memberId);\n        if (memberService.loginValidation(member, loginMember)) {\n            memberService.delete(memberId);\n            return ResponseEntity.status(HttpStatus.OK).body(\"회원 삭제 성공\");\n        }\n        throw new UserException(\"회원 정보 불일치\");\n    }\n\n    /**\n     * 회원이 작성한 게시글 리스트\n     */\n    @GetMapping(\"/myPosts\")\n    public ResponseEntity boardList(@Login final Member loginMember) {\n\n        final Member member = memberService.findOne(loginMember.getId()); // 1\n\n        final List<MyPostsResponse> myPostsResponses = member.getBoardList().stream()\n                .map(MyPostsResponse::of)\n                .collect(toList());\n\n        final Message message = new Message(StatusEnum.OK, \"회원이 작성한 게시글 조회 성공\", myPostsResponses);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(new MediaType(\"application\", \"json\", Charset.forName(\"UTF-8\")));\n\n        return new ResponseEntity<>(message, headers, HttpStatus.OK);\n    }\n\n    private Page<Member> memberListSearch(final MemberSearch memberSearch, Pageable pageable) {\n        Page<Member> memberList = null;\n        if (memberSearch.searchIsEmpty()) {\n            memberList = memberService.memberList(pageable);\n        } else {\n            String memberName = memberSearch.getMemberName();\n            String memberGender = memberSearch.getMemberGender();\n\n            if (memberGender == null) {\n                memberList = memberService.searchName(memberName, pageable);\n            } else {\n                memberList = memberService.searchAll(memberName, memberGender, pageable);\n            }\n        }\n        return memberList;\n    }\n\n    @Data\n    @AllArgsConstructor\n    static class Result<T> {\n        private T data;\n    }\n\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/domain/member/api/MemberApiController.java b/src/main/java/springJpaBoard/Board/domain/member/api/MemberApiController.java
--- a/src/main/java/springJpaBoard/Board/domain/member/api/MemberApiController.java	
+++ b/src/main/java/springJpaBoard/Board/domain/member/api/MemberApiController.java	
@@ -19,7 +19,7 @@
 import springJpaBoard.Board.global.Error.StatusEnum;
 import springJpaBoard.Board.global.Error.exception.UserException;
 import springJpaBoard.Board.domain.member.model.Member;
-import springJpaBoard.Board.domain.argumenresolver.Login;
+import springJpaBoard.Board.global.argumenresolver.Login;
 import springJpaBoard.Board.domain.member.model.MemberSearch;
 import springJpaBoard.Board.domain.board.service.BoardService;
 import springJpaBoard.Board.domain.member.service.MemberService;
Index: src/main/java/springJpaBoard/Board/global/config/WebConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.global.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.method.support.HandlerMethodArgumentResolver;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\nimport springJpaBoard.Board.domain.argumenresolver.LoginMemberArgumentResolver;\nimport springJpaBoard.Board.global.interceptor.LogInterceptor;\nimport springJpaBoard.Board.global.interceptor.LoginCheckInterceptor;\n\nimport java.util.List;\n\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new LogInterceptor())\n                .order(1)\n                .addPathPatterns(\"/**\")\n                .excludePathPatterns(\"/css/*\", \"/*.ico\", \"error\", \"/error-page/**\");\n\n        registry.addInterceptor(new LoginCheckInterceptor())\n                .order(2)\n                .addPathPatterns(\"/**\")\n                .excludePathPatterns(\n                        \"/\", \"/css/**\", \"/*.ico\", \"/error\", \"/error-page/**\",\n                        \"/members/new\", \"/members/login\", \"/members\", \"/members/logout\",\n                        \"/boards\", \"/boards/{boardId}/detail\",\n\n                        \"/api/members/login\", \"/api/members\", \"/api/members/logout\",\n                        \"/api/boards/list\", \"/api/boards/detail/**\"\n                );\n    }\n\n    @Override\n    public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {\n        resolvers.add(new LoginMemberArgumentResolver());\n    }\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/global/config/WebConfig.java b/src/main/java/springJpaBoard/Board/global/config/WebConfig.java
--- a/src/main/java/springJpaBoard/Board/global/config/WebConfig.java	
+++ b/src/main/java/springJpaBoard/Board/global/config/WebConfig.java	
@@ -4,7 +4,7 @@
 import org.springframework.web.method.support.HandlerMethodArgumentResolver;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
-import springJpaBoard.Board.domain.argumenresolver.LoginMemberArgumentResolver;
+import springJpaBoard.Board.global.argumenresolver.LoginMemberArgumentResolver;
 import springJpaBoard.Board.global.interceptor.LogInterceptor;
 import springJpaBoard.Board.global.interceptor.LoginCheckInterceptor;
 
Index: src/main/java/springJpaBoard/Board/domain/board/api/BoardApiController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.domain.board.api;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport springJpaBoard.Board.global.Error.Message;\nimport springJpaBoard.Board.global.Error.StatusEnum;\nimport springJpaBoard.Board.global.Error.exception.UserException;\nimport springJpaBoard.Board.api.apirepository.BoardApiRepository;\nimport springJpaBoard.Board.domain.board.model.Board;\nimport springJpaBoard.Board.domain.member.model.Member;\nimport springJpaBoard.Board.domain.argumenresolver.Login;\nimport springJpaBoard.Board.domain.board.model.BoardSearch;\nimport springJpaBoard.Board.domain.board.service.BoardService;\nimport springJpaBoard.Board.domain.comment.service.CommentService;\nimport springJpaBoard.Board.domain.member.service.MemberService;\n\nimport java.nio.charset.Charset;\nimport java.util.List;\n\nimport static java.util.stream.Collectors.toList;\nimport static org.springframework.data.domain.Sort.Direction;\nimport static springJpaBoard.Board.domain.board.dto.BoardDto.*;\nimport static springJpaBoard.Board.domain.comment.dto.CommentDto.CommentResponse;\nimport static springJpaBoard.Board.domain.member.dto.MemberDto.MemberResponse;\n\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/api/boards\")\n@Slf4j\npublic class BoardApiController {\n    private final BoardService boardService;\n    private final MemberService memberService;\n    private final CommentService commentService;\n    private final BoardApiRepository boardApiRepository;\n\n    /* 게시글 작성 */\n    @GetMapping\n    public ResponseEntity writeForm(@Login final Member loginMember) {\n\n        final MemberResponse memberResponse = MemberResponse.of(loginMember);\n\n        return ResponseEntity.status(HttpStatus.OK).body(memberResponse.id());\n    }\n\n\n    @PostMapping\n    public ResponseEntity<Message> write(@RequestBody @Validated final CreateBoardRequest boardRequestDTO, @Login final Member loginMember, BindingResult result) {\n\n        /*\n        오류 발생시(@Valid 에서 발생)\n         */\n        if (result.hasErrors()) {\n            throw new IllegalStateException(\"게시글 양식에 맞지 않습니다.\");\n        }\n\n        final Long boardId = boardService.write(boardRequestDTO, loginMember.getId());\n\n        final Message message = new Message(StatusEnum.OK, \"게시글 작성 성공\", boardId);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(new MediaType(\"application\", \"json\", Charset.forName(\"UTF-8\")));\n\n        return new ResponseEntity<>(message, headers, HttpStatus.OK);\n    }\n\n    /* 게시글 목록 */\n    @GetMapping(\"/list\")\n    public ResponseEntity<Message> boardLost(@RequestBody final BoardSearch boardSearch, @PageableDefault(page = 0, size = 9, sort = \"id\", direction = Direction.ASC) Pageable pageable) {\n\n        final Page<Board> boardList = searchBoardList(boardSearch, pageable);\n\n        final List<BoardListResponse> boards = boardList.stream()\n                .map(BoardListResponse::of)\n                .collect(toList());\n\n        final Message message = new Message(StatusEnum.OK, \"게시글 목록 조회 성공\", boards);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(new MediaType(\"application\", \"json\", Charset.forName(\"UTF-8\")));\n\n        return new ResponseEntity<>(message, headers, HttpStatus.OK);\n    }\n\n\n    /* 게시글 상세 */\n    @GetMapping(\"/detail/{boardId}\")\n    public ResponseEntity<Message> detail(@PathVariable final Long boardId, @PageableDefault(page = 0, size = 10, sort = \"id\",\n            direction = Sort.Direction.DESC) Pageable pageable) {\n\n        final Board board = boardService.findOne(boardId);\n        boardService.updateView(boardId); // views ++\n\n        final List<CommentResponse> comments = board.getCommentList().stream()\n                .map(CommentResponse::of)\n                .toList();\n\n        final BoardResponse boardDto = BoardResponse.of(board, comments);\n\n        final Message message = new Message(StatusEnum.OK, \"게시글 상세 페이지 조회 성공\", boardDto);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(new MediaType(\"application\", \"json\", Charset.forName(\"UTF-8\")));\n\n        return new ResponseEntity<>(message, headers, HttpStatus.OK);\n    }\n\n    /* 게시글 수정 */\n    @GetMapping(\"/edit/{boardId}\")\n    public ResponseEntity updateBoardForm(@PathVariable(\"boardId\") final Long boardId,\n                                                   @Login final Member loginMember) {\n        final Board board = boardApiRepository.findBoardWithMember(boardId); //쿼리 최적화를 위해서 사용\n        final Member boardMember = board.getMember();\n\n        if (memberService.loginValidation(loginMember, boardMember)) {\n\n            final ModifyBoardResponse modifyBoardResponse = ModifyBoardResponse.of(board);\n\n            final Message message = new Message(StatusEnum.OK, \"게시글 수정 페이지 조회\", modifyBoardResponse);\n            HttpHeaders headers = new HttpHeaders();\n            headers.setContentType(new MediaType(\"application\", \"json\", Charset.forName(\"UTF-8\")));\n\n            return new ResponseEntity<>(message, headers, HttpStatus.OK);\n        }\n\n        throw new UserException(\"게시글 회원 정보와 로그인 회원 정보가 일치하지 않습니다.\");\n    }\n\n    @PutMapping(\"/edit/{boardId}\")\n    public ResponseEntity updateBoard(@RequestBody final ModifyBoardRequest boardRequestDTO, BindingResult result,\n                                      @PathVariable final Long boardId, @Login final Member loginMember) {\n\n        if (result.hasErrors()) {\n            throw new IllegalStateException(\"양식을 지켜주세요.\");\n        }\n\n        final Board board = boardApiRepository.findBoardWithMember(boardId);\n        final Member boardMember = board.getMember();\n\n        if (memberService.loginValidation(loginMember, boardMember)) {\n            final ModifyBoardResponse modifyBoardResponse = boardService.update(board, boardRequestDTO);\n\n            final Message message = new Message(StatusEnum.OK, \"게시글 수정 성공\", modifyBoardResponse);\n            HttpHeaders headers = new HttpHeaders();\n            headers.setContentType(new MediaType(\"application\", \"json\", Charset.forName(\"UTF-8\")));\n\n            return new ResponseEntity<>(message, headers, HttpStatus.OK);\n        }\n\n        throw new UserException(\"게시글 회원 정보와 로그인 회원 정보 불일치\");\n    }\n\n    /**\n     * 게시글 삭제\n     */\n    @DeleteMapping(\"/delete/{boardId}\")\n    public ResponseEntity deleteBoard(@PathVariable final Long boardId, @Login final Member loginMember){\n        //세션에 회원 데이터가 없으면 home\n        final Board board = boardApiRepository.findBoardWithMember(boardId);\n        final Member boardMember = board.getMember();\n        if (memberService.loginValidation(loginMember, boardMember)) {\n            boardService.delete(boardId);\n\n            final Message message = new Message(StatusEnum.OK, \"게시글 삭제 성공\", boardId);\n            HttpHeaders headers = new HttpHeaders();\n            headers.setContentType(new MediaType(\"application\", \"json\", Charset.forName(\"UTF-8\")));\n\n            return new ResponseEntity<>(message, headers, HttpStatus.OK);\n        }\n\n        throw new UserException(\"게시글 회원 정보와 로그인 회원 정보 불일치\");\n    }\n\n\n    @Data\n    @AllArgsConstructor\n    static class Result<T> {\n        private T data;\n    }\n\n    private Page<Board> searchBoardList(final BoardSearch boardSearch, Pageable pageable) {\n        Page<Board> boardList = null;\n        if (boardSearch.searchIsEmpty()) {\n            boardList = boardService.boardList(pageable);\n        } else {\n            final String boardTitle = boardSearch.getBoardTitle();\n            final String memberGender = boardSearch.getMemberGender();\n\n            if (memberGender == null) {\n                boardList = boardService.searchTitle(boardTitle, pageable);\n            } else {\n                boardList = boardService.searchAll(boardTitle, memberGender, pageable);\n            }\n        }\n        return boardList;\n    }\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/domain/board/api/BoardApiController.java b/src/main/java/springJpaBoard/Board/domain/board/api/BoardApiController.java
--- a/src/main/java/springJpaBoard/Board/domain/board/api/BoardApiController.java	
+++ b/src/main/java/springJpaBoard/Board/domain/board/api/BoardApiController.java	
@@ -21,7 +21,7 @@
 import springJpaBoard.Board.api.apirepository.BoardApiRepository;
 import springJpaBoard.Board.domain.board.model.Board;
 import springJpaBoard.Board.domain.member.model.Member;
-import springJpaBoard.Board.domain.argumenresolver.Login;
+import springJpaBoard.Board.global.argumenresolver.Login;
 import springJpaBoard.Board.domain.board.model.BoardSearch;
 import springJpaBoard.Board.domain.board.service.BoardService;
 import springJpaBoard.Board.domain.comment.service.CommentService;
Index: src/main/java/springJpaBoard/Board/domain/like/api/LikeApiController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.domain.like.api;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport springJpaBoard.Board.domain.board.model.Board;\nimport springJpaBoard.Board.domain.member.model.Member;\nimport springJpaBoard.Board.domain.argumenresolver.Login;\nimport springJpaBoard.Board.domain.board.service.BoardService;\nimport springJpaBoard.Board.domain.like.service.LikeService;\n\n@Slf4j\n@RestController\n@RequestMapping(\"/api/likes\")\n@RequiredArgsConstructor\npublic class LikeApiController {\n    private final LikeService likeService;\n    private final BoardService boardService;\n\n    @GetMapping(value = \"/up/{boardId}\")\n    public ResponseEntity addLike(@PathVariable final Long boardId, @Login final Member loginMember) {\n\n        final Board board = boardService.findOne(boardId);\n        likeService.addLike(loginMember, board);\n\n        return ResponseEntity.status(HttpStatus.OK).body(\"게시글 좋아요 +1\");\n    }\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/domain/like/api/LikeApiController.java b/src/main/java/springJpaBoard/Board/domain/like/api/LikeApiController.java
--- a/src/main/java/springJpaBoard/Board/domain/like/api/LikeApiController.java	
+++ b/src/main/java/springJpaBoard/Board/domain/like/api/LikeApiController.java	
@@ -10,7 +10,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import springJpaBoard.Board.domain.board.model.Board;
 import springJpaBoard.Board.domain.member.model.Member;
-import springJpaBoard.Board.domain.argumenresolver.Login;
+import springJpaBoard.Board.global.argumenresolver.Login;
 import springJpaBoard.Board.domain.board.service.BoardService;
 import springJpaBoard.Board.domain.like.service.LikeService;
 
Index: src/main/java/springJpaBoard/Board/domain/comment/api/CommentApiController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.domain.comment.api;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.*;\nimport springJpaBoard.Board.global.Error.Message;\nimport springJpaBoard.Board.global.Error.StatusEnum;\nimport springJpaBoard.Board.domain.comment.model.Comment;\nimport springJpaBoard.Board.domain.member.model.Member;\nimport springJpaBoard.Board.domain.argumenresolver.Login;\nimport springJpaBoard.Board.domain.board.service.BoardService;\nimport springJpaBoard.Board.domain.comment.service.CommentService;\nimport springJpaBoard.Board.domain.member.service.MemberService;\n\nimport java.nio.charset.Charset;\n\nimport static springJpaBoard.Board.domain.comment.dto.CommentDto.CommentResponse;\nimport static springJpaBoard.Board.domain.comment.dto.CommentDto.CreateCommentRequest;\n\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/api/comments\")\n@Slf4j\npublic class CommentApiController {\n\n    private final BoardService boardService;\n    private final CommentService commentService;\n    private final MemberService memberService;\n\n    /**\n     * 댓글 작성\n     */\n    @PostMapping\n    public ResponseEntity saveComment(@RequestBody final CreateCommentRequest commentRequestDTO, BindingResult result, @Login final Member loginMember) {\n\n        if (result.hasErrors()) {\n            throw new IllegalStateException(\"양식 불일치 오류\");\n        }\n\n        final CommentResponse commentDto = commentService.save(commentRequestDTO, loginMember.getId());\n\n        final Message message = new Message(StatusEnum.OK, \"댓글 작성 성공\", commentDto);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(new MediaType(\"application\", \"json\", Charset.forName(\"UTF-8\")));\n\n        return new ResponseEntity<>(message, headers, HttpStatus.OK);\n\n    }\n\n    @DeleteMapping(\"/delete/{commentId}\")\n    public ResponseEntity deleteComment(@PathVariable final Long commentId) {\n\n        final Comment comment = commentService.findOne(commentId); // 해당 댓글이 존재하지 않는 경우 여기서 Exception 발생\n        commentService.delete(commentId, comment.getBno());\n\n        final Message message = new Message(StatusEnum.OK, \"댓글 삭제 성공\", commentId);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(new MediaType(\"application\", \"json\", Charset.forName(\"UTF-8\")));\n\n        return new ResponseEntity<>(message, headers, HttpStatus.OK);\n    }\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/domain/comment/api/CommentApiController.java b/src/main/java/springJpaBoard/Board/domain/comment/api/CommentApiController.java
--- a/src/main/java/springJpaBoard/Board/domain/comment/api/CommentApiController.java	
+++ b/src/main/java/springJpaBoard/Board/domain/comment/api/CommentApiController.java	
@@ -12,7 +12,7 @@
 import springJpaBoard.Board.global.Error.StatusEnum;
 import springJpaBoard.Board.domain.comment.model.Comment;
 import springJpaBoard.Board.domain.member.model.Member;
-import springJpaBoard.Board.domain.argumenresolver.Login;
+import springJpaBoard.Board.global.argumenresolver.Login;
 import springJpaBoard.Board.domain.board.service.BoardService;
 import springJpaBoard.Board.domain.comment.service.CommentService;
 import springJpaBoard.Board.domain.member.service.MemberService;
Index: src/main/java/springJpaBoard/Board/global/Error/exception/InvalidValueException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.global.Error.exception;\n\npublic class InvalidValueException extends BusinessException{\n\n    public InvalidValueException(String value) {\n        super(value, ErrorCode.INVALID_INPUT_VALUE);\n    }\n\n    public InvalidValueException(String value, ErrorCode errorCode) {\n        super(value, errorCode);\n    }\n\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/global/Error/exception/InvalidValueException.java b/src/main/java/springJpaBoard/Board/global/Error/exception/InvalidValueException.java
--- a/src/main/java/springJpaBoard/Board/global/Error/exception/InvalidValueException.java	
+++ b/src/main/java/springJpaBoard/Board/global/Error/exception/InvalidValueException.java	
@@ -1,5 +1,7 @@
 package springJpaBoard.Board.global.Error.exception;
 
+import springJpaBoard.Board.global.Error.ErrorCode;
+
 public class InvalidValueException extends BusinessException{
 
     public InvalidValueException(String value) {
Index: src/main/java/springJpaBoard/Board/global/Error/exception/BusinessException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.global.Error.exception;\n\nimport lombok.Getter;\n\n@Getter\npublic class BusinessException extends RuntimeException {\n\n    private ErrorCode errorCode;\n\n    public BusinessException(ErrorCode errorCode) {\n        super(errorCode.getMessage());\n        this.errorCode = errorCode;\n    }\n\n    public BusinessException(String message, ErrorCode errorCode) {\n        super(message);\n        this.errorCode = errorCode;\n    }\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/global/Error/exception/BusinessException.java b/src/main/java/springJpaBoard/Board/global/Error/exception/BusinessException.java
--- a/src/main/java/springJpaBoard/Board/global/Error/exception/BusinessException.java	
+++ b/src/main/java/springJpaBoard/Board/global/Error/exception/BusinessException.java	
@@ -1,6 +1,7 @@
 package springJpaBoard.Board.global.Error.exception;
 
 import lombok.Getter;
+import springJpaBoard.Board.global.Error.ErrorCode;
 
 @Getter
 public class BusinessException extends RuntimeException {
Index: src/main/java/springJpaBoard/Board/domain/etc/HomeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package springJpaBoard.Board.domain.etc;\n\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport springJpaBoard.Board.domain.member.model.Member;\nimport springJpaBoard.Board.domain.argumenresolver.Login;\nimport springJpaBoard.Board.domain.member.repository.MemberRepository;\n\nimport static springJpaBoard.Board.domain.member.dto.MemberDto.MemberResponse;\n\n@Controller\n@RequiredArgsConstructor\npublic class HomeController {\n\n    private final MemberRepository memberRepository;\n\n    @GetMapping(\"/\")\n    public String homeLoginV3ArgumentResolver(@Login Member loginMember, Model model) {\n\n        //세션이 없으면 home\n        if (loginMember == null) {\n            return \"home\";\n        }\n\n        /*DTO로 감싸기!*/\n        //세션이 유지되면 로그인 홈으로 이동\n        MemberResponse memberResponseDto = MemberResponse.of(loginMember);\n\n        model.addAttribute(\"member\", memberResponseDto);\n        return \"loginHome\";\n    }\n}\n
===================================================================
diff --git a/src/main/java/springJpaBoard/Board/domain/etc/HomeController.java b/src/main/java/springJpaBoard/Board/domain/etc/HomeController.java
--- a/src/main/java/springJpaBoard/Board/domain/etc/HomeController.java	
+++ b/src/main/java/springJpaBoard/Board/domain/etc/HomeController.java	
@@ -5,7 +5,7 @@
 import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.GetMapping;
 import springJpaBoard.Board.domain.member.model.Member;
-import springJpaBoard.Board.domain.argumenresolver.Login;
+import springJpaBoard.Board.global.argumenresolver.Login;
 import springJpaBoard.Board.domain.member.repository.MemberRepository;
 
 import static springJpaBoard.Board.domain.member.dto.MemberDto.MemberResponse;
